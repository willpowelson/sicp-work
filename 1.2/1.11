#lang sicp
;
;f(n) = n < 3  | n
;       n >= 3 | f(n-1) + 2f(n-2) + 3f(n-3)

(define (f-rec n)
  (cond
    ((< n 3) n)
    (else (+
           (f-rec (- n 1))
           (* 2 (f-rec (- n 2)))
           (* 3 (f-rec (- n 3)))))))

(define (f-iter n)
  (define (inner-f-iter ak-3 ak-2 ak-1 k)
    (cond
      ((> k n) ak-1)
      (else (inner-f-iter
             ak-2
             ak-1
             (+ ak-1 (* 2 ak-2) (* 3 ak-3))
             (+ k 1)))))
  
  (cond
    ((< n 3) n)
    (else (inner-f-iter 0 1 2 3))))

(define (test n) (= (f-rec n) (f-iter n)))

"tests"
(test 1)
(test 2)
(test 3)
(test 4)
(test 5)
(test 6)
(test 7)


